%%%%%%%%%%%%%%%%%%%%%  Layers specification %%%%%%%%%%%%%%%%%%

 	net.layers{end+1}.properties = struct('type',net.types.input, 'sizeFm' ,[28 28 28],'numFm',1 );         %inputLayer
	net.layers{end+1}.properties = struct('type',net.types.conv,'numFm',7  , 'Activation',@Relu, 'dActivation',@dRelu,'kernel',5,'pad',2, 'stride', [2 2 4], 'pooling', [1 1 1]);
	net.layers{end+1}.properties = struct('type',net.types.conv,'numFm',17 , 'kernel',[5 5 3]  ,'pad',[1 1 0], 'pooling', [1 1 1], 'dropOut' ,0.8);
	net.layers{end+1}.properties = struct('type',net.types.batchNorm,'gamma',1,'beta',0);
	net.layers{end+1}.properties = struct('type',net.types.fc,'numFm',128);
	net.layers{end+1}.properties = struct('type',net.types.fc,'numFm',10);
	net.layers{end+1}.properties = struct('type',net.types.softmax);
 	net.layers{end+1}.properties = struct('type',net.types.regression,'lossFunc',@CrossEnt,'costFunc',@CrossEnt_Cost);     %regression Layer

%%%%%%%%%%%%%%%%%%%%%  Hyper params - training %%%%%%%%%%%%%%%%%%

	net.hyperParam.trainLoopCount = 100;		%on how many images to train before evaluating the network
	net.hyperParam.testImageNum   = 100;   	% after each loop, on how many images to evaluate network performance
	net.hyperParam.ni_initial     = 0.05;		% ni to start training process
	net.hyperParam.ni_final       = 0.00001;	% final ni to stop the training process
    net.runInfoParam.verifyBP     = 0; 

    net.hyperParam.batchNum=10;
